name: Deploy Argo CD to GKE (Helm)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: global-web-server-473500
  CLUSTER_NAME: us-west2-gke-cluster
  CLUSTER_LOCATION: us-west2
  NAMESPACE: argocd
  RELEASE_NAME: argocd
  VALUES_DIR: argocd        # folder that contains values.yaml (no Chart.yaml)

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      USE_GKE_GCLOUD_AUTH_PLUGIN: "True"

    steps:
      - uses: actions/checkout@v4

      - name: Auth to GCP (Service Account Key)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true

      - name: Set up gcloud (with GKE auth plugin)
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: gke-gcloud-auth-plugin

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Fetch GKE credentials
        run: |
          gcloud container clusters get-credentials "$CLUSTER_NAME" \
            --project "$PROJECT_ID" \
            --location "$CLUSTER_LOCATION"

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Helm repo add + update
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update

      # EITHER keep this step...
      #- name: Create namespace if needed
      #  run: kubectl get ns $NAMESPACE || kubectl create ns $NAMESPACE

      # ...OR let Helm create it automatically with --create-namespace (chosen below)
      - name: Install / Upgrade Argo CD (direct)
        run: |
          helm upgrade --install "$RELEASE_NAME" argo/argo-cd \
            --namespace "$NAMESPACE" \
            --create-namespace \
            --values "${VALUES_DIR}/values.yaml" \
            --wait --timeout 15m

      - name: Show Argo CD Server External IP
        run: |
          for i in {1..30}; do
            IP=$(kubectl -n $NAMESPACE get svc argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            HN=$(kubectl -n $NAMESPACE get svc argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$IP" ] || [ -n "$HN" ]; then
              echo "Argo CD UI:"
              [ -n "$IP" ] && echo "  http://$IP"
              [ -n "$HN" ] && echo "  http://$HN"
              exit 0
            fi
            sleep 10
          done
          echo "LB still provisioning. Check later with:"
          echo "kubectl -n $NAMESPACE get svc argocd-server -o wide"
